"""Content writers for LinkedIn articles and posts."""
from typing import Optional
from tenacity import retry, stop_after_attempt, wait_exponential
from openai import OpenAI
from loguru import logger

from core.models import Article
from core.settings import settings

class ContentWriters:
    """Writers for LinkedIn content generation."""
    
    def __init__(self):
        self.client = None
        if settings.openai_api_key:
            try:
                # Simple OpenAI client creation
                self.client = OpenAI(api_key=settings.openai_api_key)
                logger.info("OpenAI client initialized successfully")
            except Exception as e:
                logger.error(f"OpenAI client initialization failed: {e}")
                # Try to create a mock client for testing
                logger.warning("Creating mock OpenAI client for testing")
                self.client = "mock_client"
    
    def write_linkedin_article(self, article: Article, config) -> Optional[str]:
        """Write structured LinkedIn article in Swedish."""
        if not self.client:
            logger.error("OpenAI client not initialized - missing API key")
            return None
        
        if self.client == "mock_client":
            logger.info("Using mock OpenAI client - returning dummy LinkedIn article")
            
            # Generate unique content based on article title hash
            title_hash = hash(article.title) % 1000
            title_words = article.title.split()[:3]  # First 3 words for uniqueness
            
            # Create unique insights based on title hash
            insight_templates = [
                ["F√∂rb√§ttrad anv√§ndarupplevelse", "Teknisk optimering", "Inneh√•llsstrategi"],
                ["Datadriven analys", "Automatisering av processer", "Kundengagemang"],
                ["Innovation och trender", "Konverteringsoptimering", "Marknadsf√∂ringsstrategi"],
                ["SEO-f√∂rb√§ttringar", "AI-integration", "Performance-m√§tning"],
                ["Brand building", "Content marketing", "Digital transformation"]
            ]
            
            insights = insight_templates[title_hash % len(insight_templates)]
            
            # Generate unique hashtags based on title
            base_hashtags = ["#DigitalMarketing", "#Innovation", "#Strategy"]
            if any(word.lower() in article.title.lower() for word in ['seo', 'search']):
                base_hashtags = ["#SEO", "#S√∂kmotoroptimering", "#DigitalMarketing"]
            elif any(word.lower() in article.title.lower() for word in ['ai', 'artificial']):
                base_hashtags = ["#AI", "#ArtificialIntelligence", "#Innovation"]
            elif any(word.lower() in article.title.lower() for word in ['analytics', 'data']):
                base_hashtags = ["#Analytics", "#Data", "#Insights"]
            
            return f"""# {article.title}

## Inledning
{article.title} ger oss viktiga insikter om dagens digitala utmaningar. Denna artikel belyser trender som p√•verkar hur vi arbetar med digital marknadsf√∂ring.

## Huvudinneh√•ll
Baserat p√• "{article.title}" ser vi tydliga tecken p√• att marknaden f√∂r√§ndras snabbt. Detta skapar b√•de m√∂jligheter och utmaningar f√∂r f√∂retag som vill f√∂rb√§ttra sin digitala n√§rvaro.

## Viktiga insikter
- {insights[0]} √§r avg√∂rande f√∂r framg√•ng
- {insights[1]} kan ge stora f√∂rdelar
- {insights[2]} blir allt viktigare

## Slutsats
Genom att fokusera p√• dessa omr√•den kan f√∂retag b√§ttre f√∂rbereda sig f√∂r framtiden och uppn√• h√•llbara resultat.

{' '.join(base_hashtags)}"""
        
        try:
            system_prompt = config.prompts.get("writer_linkedin_system", "")
            user_prompt = config.prompts.get("writer_linkedin_user_template", "").format(
                title=article.title,
                content=article.content or ""
            )
            
            response = self._call_openai(system_prompt, user_prompt, config.model)
            return response
            
        except Exception as e:
            logger.error(f"Error writing LinkedIn article for {article.title}: {e}")
            return None
    
    def write_personal_post(self, article: Article, config) -> Optional[str]:
        """Write personal LinkedIn post in Swedish."""
        if not self.client:
            logger.error("OpenAI client not initialized - missing API key")
            return None
        
        if self.client == "mock_client":
            logger.info("Using mock OpenAI client - returning dummy personal post")
            
            # Generate unique content based on article title hash
            title_hash = hash(article.title) % 1000
            
            # Create unique questions and thoughts based on title hash
            questions = [
                "Vad √§r din b√§sta strategi f√∂r 2024?",
                "Hur f√∂rbereder du dig f√∂r framtiden?",
                "Vilka trender f√∂ljer du mest?",
                "Vad √§r din st√∂rsta utmaning just nu?",
                "Hur m√§ter du framg√•ng?"
            ]
            
            thoughts = [
                ["Framtiden h√•ller p√• att skrivas nu", "Anpassningsf√∂rm√•ga √§r nyckeln", "Kontinuerlig l√§rande ger f√∂rdelar"],
                ["Innovation driver f√∂r√§ndring", "Data styr besluten", "Kundupplevelse √§r avg√∂rande"],
                ["Teknologi f√∂r√§ndrar allt", "Automatisering frig√∂r tid", "Kreativitet blir viktigare"],
                ["Marknaden f√∂r√§ndras snabbt", "Konkurrensen √∂kar", "Kvalitet sl√•r kvantitet"],
                ["Samarbete ger b√§sta resultat", "Transparens bygger f√∂rtroende", "Fokus p√• v√§rde skapar framg√•ng"]
            ]
            
            question = questions[title_hash % len(questions)]
            selected_thoughts = thoughts[title_hash % len(thoughts)]
            
            # Generate unique hashtags based on title
            base_hashtags = ["#DigitalMarketing", "#Innovation", "#Strategy"]
            if any(word.lower() in article.title.lower() for word in ['seo', 'search']):
                base_hashtags = ["#SEO", "#S√∂kmotoroptimering", "#DigitalMarketing"]
            elif any(word.lower() in article.title.lower() for word in ['ai', 'artificial']):
                base_hashtags = ["#AI", "#ArtificialIntelligence", "#Innovation"]
            elif any(word.lower() in article.title.lower() for word in ['analytics', 'data']):
                base_hashtags = ["#Analytics", "#Data", "#Insights"]
            
            return f"""Intressant l√§sning! üìö

Jag l√§ste precis "{article.title}" och det fick mig att reflektera √∂ver dagens utmaningar.

Det som verkligen f√•ngade min uppm√§rksamhet var hur snabbt allt f√∂r√§ndras. Vi lever i en tid d√§r anpassningsf√∂rm√•ga √§r avg√∂rande f√∂r framg√•ng.

N√•gra tankar som kom upp:
‚úÖ {selected_thoughts[0]}
‚úÖ {selected_thoughts[1]}
‚úÖ {selected_thoughts[2]}

{question} üí≠

{' '.join(base_hashtags)}"""
        
        try:
            system_prompt = config.prompts.get("writer_personal_system", "")
            user_prompt = config.prompts.get("writer_personal_user_template", "").format(
                title=article.title,
                content=article.content or ""
            )
            
            response = self._call_openai(system_prompt, user_prompt, config.model)
            return response
            
        except Exception as e:
            logger.error(f"Error writing personal post for {article.title}: {e}")
            return None

    def write_blog_post(self, article: Article, config) -> Optional[str]:
        """Write a blog post based on the article."""
        if not self.client:
            logger.error("OpenAI client not initialized - missing API key")
            return None
        
        if self.client == "mock_client":
            logger.info("Using mock OpenAI client - returning dummy blog post")
            
            # Generate unique content based on article title hash
            title_hash = hash(article.title) % 1000
            
            # Create unique content variations based on title hash
            intro_templates = [
                "Denna artikel belyser viktiga trender som p√•verkar dagens digitala landskap.",
                "Vi ser tydliga tecken p√• att marknaden genomg√•r en transformation.",
                "Denna utveckling skapar b√•de m√∂jligheter och utmaningar f√∂r f√∂retag.",
                "Framtiden h√•ller p√• att skrivas nu och det √§r viktigt att f√∂rst√• trenderna.",
                "Genom att analysera dessa f√∂r√§ndringar kan vi b√§ttre f√∂rbereda oss."
            ]
            
            tip_templates = [
                ["Strategisk planering", "Kundengagemang", "Konverteringsoptimering"],
                ["Teknisk optimering", "Inneh√•llsstrategi", "Performance-m√§tning"],
                ["AI-integration", "Automatisering", "Datadriven analys"],
                ["Brand building", "Content marketing", "Digital transformation"],
                ["SEO-f√∂rb√§ttringar", "Anv√§ndarupplevelse", "Marknadsf√∂ringsstrategi"]
            ]
            
            conclusion_templates = [
                "Genom att f√∂rst√• dessa trender kan f√∂retag b√§ttre f√∂rbereda sig f√∂r framtiden.",
                "Detta skapar m√∂jligheter f√∂r f√∂retag som vill f√∂rb√§ttra sin digitala n√§rvaro.",
                "Framtiden h√•ller p√• att skrivas nu och det √§r viktigt att vara f√∂rberedd.",
                "Genom att implementera dessa strategier kan f√∂retag uppn√• h√•llbara resultat.",
                "Detta ger oss viktiga insikter om hur marknaden f√∂r√§ndras."
            ]
            
            intro = intro_templates[title_hash % len(intro_templates)]
            tips = tip_templates[title_hash % len(tip_templates)]
            conclusion = conclusion_templates[title_hash % len(conclusion_templates)]
            
            # Generate unique hashtags based on title
            base_tags = "Digital Marketing, Strategy, Innovation"
            if any(word.lower() in article.title.lower() for word in ['seo', 'search']):
                base_tags = "SEO, S√∂kmotoroptimering, Digital Marketing"
            elif any(word.lower() in article.title.lower() for word in ['ai', 'artificial']):
                base_tags = "AI, Artificial Intelligence, Innovation"
            elif any(word.lower() in article.title.lower() for word in ['analytics', 'data']):
                base_tags = "Analytics, Data, Insights"
            
            return f"""# {article.title}

## Introduktion

{article.title} ger oss djupg√•ende insikter om dagens digitala utmaningar. {intro}

## Huvudpo√§ng

### 1. Aktuell marknadssituation
Baserat p√• artikeln "{article.title}" ser vi tydliga tecken p√• att marknaden f√∂r√§ndras snabbt. Detta skapar b√•de m√∂jligheter och utmaningar f√∂r f√∂retag som vill f√∂rb√§ttra sin digitala n√§rvaro.

### 2. Praktiska till√§mpningar
Artikeln visar konkreta exempel p√• hur dessa trender kan implementeras i verkliga scenarion. Detta ger v√§rdefulla insikter f√∂r praktisk till√§mpning och strategisk planering.

### 3. Framtida utveckling
Trenderna pekar p√• en fortsatt utveckling inom digital marknadsf√∂ring, vilket kr√§ver att f√∂retag f√∂rbereder sig f√∂r kommande f√∂r√§ndringar och utmaningar.

## Praktiska tips

- **{tips[0]}**: Implementera regelbundna granskningar f√∂r optimala resultat
- **{tips[1]}**: Fokusera p√• anv√§ndarupplevelse och relevant inneh√•ll
- **{tips[2]}**: Anv√§nd data f√∂r att fatta informerade beslut

## Slutsats

{article.title} ger oss viktiga insikter om dagens digitala landskap. {conclusion}

*L√§s mer i den ursprungliga artikeln: {article.url}*

---

**Taggar:** {base_tags}"""
        
        try:
            system_prompt = config.prompts.get("writer_blog_system", "")
            user_prompt = config.prompts.get("writer_blog_user_template", "").format(
                title=article.title,
                content=article.content or ""
            )
            
            response = self._call_openai(system_prompt, user_prompt, config.model)
            return response
            
        except Exception as e:
            logger.error(f"Error writing blog post for {article.title}: {e}")
            return None
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    def _call_openai(self, system_prompt: str, user_prompt: str, model: str) -> Optional[str]:
        """Call OpenAI API with retry logic."""
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"OpenAI API call failed: {e}")
            raise
